/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Gradle plugin project to get you started.
 * For more details take a look at the Writing Custom Plugins chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.0.1/userguide/custom_plugins.html
 */

plugins {
    // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins
    id 'java-gradle-plugin'
    id 'maven-publish'
}

group = 'com.github.tw'
version = 'v1'

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'
    implementation group: 'org.apache.commons', name: 'commons-io', version: '1.3.2'
    implementation 'org.testng:testng:7.1.0'
    compileOnly 'org.projectlombok:lombok:1.18.20'
    annotationProcessor 'org.projectlombok:lombok:1.18.20'

    testCompileOnly 'org.projectlombok:lombok:1.18.20'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.20'
    implementation 'org.springframework:spring-web:5.3.9'

    // Use JUnit test framework for unit tests
    testImplementation 'junit:junit:4.13.1'

    implementation files("$projectDir/src/main/java/com/thoughtworks/fusheng/lib/runner.jar")
//    implementation fileTree(dir: "$rootDir/runner/lib/build/libs/", include: 'lib.jar')
}

gradlePlugin {
    // Define the plugin
    plugins {
        fusheng {
            id = 'com.github.tw.fusheng'
            implementationClass = 'com.thoughtworks.fusheng.FushengPlugin'
        }
    }
}

// Add a source set for the functional test suite
sourceSets {
    functionalTest {
    }
}

gradlePlugin.testSourceSets(sourceSets.functionalTest)
configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)

// Add a task to run the functional tests
tasks.register('functionalTest', Test) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
}

//tasks.named('check') {
//    // Run the functional tests as part of `check`
//    dependsOn(tasks.functionalTest)
//}

publishing {
    repositories {
        maven {
            url = "$buildDir/repo"
        }
    }
}

jar {
    from {
        configurations
                .runtimeClasspath
                .collect {
                    if (it.name.equalsIgnoreCase("spring-web-5.3.9.jar")
                            || it.name.equalsIgnoreCase("commons-lang3-3.12.0.jar")
                            || it.name.equalsIgnoreCase("commons-io-1.3.2.jar")
                            || it.name.equalsIgnoreCase("runner.jar")
                    ) {
                        zipTree(it)
                    }
                }
    }
    duplicatesStrategy(DuplicatesStrategy.WARN)
}


task printDir {
    doLast {
        println "the project dir is: ${projectDir}"
        println "the root dir is: ${rootDir}"
        println "the location: $rootDir/runner/lib/build/libs"
        configurations.runtimeClasspath.collect {
            println "the file is : $it.name"
        }
    }
}